{"version":3,"file":"index.js","mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yE","sources":["webpack://block/./src/index.js"],"sourcesContent":["\r\n/**\r\n * Plugin Name: Custom Query Loop Block\r\n * Description: Adds a custom query loop block with dynamic core classes.\r\n * Version: 1.0\r\n * Author: Your Name\r\n */\r\n\r\n// defined( 'ABSPATH' ) || exit;\r\n\r\n// function add_custom_class_to_query_loop( $block_content, $block ) {\r\n// if ( isset( $block['blockName'] ) && $block['blockName'] === 'core/query' ) {\r\n// $custom_class = 'custom-list';\r\n// if ( is_string( $block_content ) ) {\r\n// $block_content = preg_replace_callback(\r\n// '/<li\\b([^>]*)>/i',\r\n// function ( $matches ) use ( $custom_class ) {\r\n// if ( strpos( $matches[1], 'class=' ) !== false ) {\r\n// return str_replace( 'class=\"', 'class=\"' . $custom_class . ' ', $matches[0] );\r\n// } else {\r\n// return '<li' . $matches[1] . ' class=\"' . esc_attr( $custom_class ) . '\">';\r\n// }\r\n// },\r\n// $block_content\r\n// );\r\n// }\r\n// }\r\n// return $block_content;\r\n// }\r\n// add_filter( 'render_block', 'add_custom_class_to_query_loop', 10, 2 );\r\n\r\n\r\n// function add_custom_class_to_query_loop( $block_content, $block ) {\r\n// \tif ( isset( $block['blockName'] ) && $block['blockName'] === 'core/query' ) {\r\n// \t\t$custom_class = 'custom-list';\r\n\r\n// \t\t// Use DOMDocument to manipulate the HTML content more reliably\r\n// \t\t$dom = new DOMDocument();\r\n// \t\tlibxml_use_internal_errors( true ); // Suppress errors due to malformed HTML\r\n// \t\t$dom->loadHTML( mb_convert_encoding( $block_content, 'HTML-ENTITIES', 'UTF-8' ) );\r\n// \t\tlibxml_clear_errors();\r\n\r\n// \t\t$lis = $dom->getElementsByTagName( 'li' );\r\n\r\n// \t\tforeach ( $lis as $li ) {\r\n// \t\t\t// Extract post ID from class attribute\r\n// \t\t\t$classAttr = $li->getAttribute( 'class' );\r\n// \t\t\tpreg_match( '/post-(\\d+)/', $classAttr, $matches );\r\n\r\n// \t\t\tif ( isset( $matches[1] ) ) {\r\n// \t\t\t\t$post_id = $matches[1];\r\n\r\n// \t\t\t\t// Fetch term IDs for categories and tags\r\n// \t\t\t\t$categories = wp_get_post_categories( $post_id );\r\n// \t\t\t\t$tags       = wp_get_post_tags( $post_id );\r\n\r\n// \t\t\t\t// Set data attributes with term IDs\r\n// \t\t\t\t$li->setAttribute( 'data-category-ids', implode( ',', $categories ) );\r\n// \t\t\t\t$li->setAttribute( 'data-tag-ids', implode( ',', wp_list_pluck( $tags, 'term_id' ) ) );\r\n\r\n// \t\t\t\t// Add custom class if not present\r\n// \t\t\t\tif ( strpos( $classAttr, $custom_class ) === false ) {\r\n// \t\t\t\t\t$li->setAttribute( 'class', trim( $classAttr . ' ' . $custom_class ) );\r\n// \t\t\t\t}\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n// \t\t// Save changes back to HTML\r\n// \t\t$block_content = $dom->saveHTML( $dom->documentElement );\r\n// \t}\r\n\r\n// \treturn $block_content;\r\n// }\r\n// add_filter( 'render_block', 'add_custom_class_to_query_loop', 10, 2 );\r\n\r\n// function add_custom_class_to_query_loop( $block_content, $block ) {\r\n// if ( isset( $block['blockName'] ) && $block['blockName'] === 'core/query' ) {\r\n// $custom_class = 'custom-list';\r\n// if ( is_string( $block_content ) ) {\r\n// $block_content = preg_replace_callback(\r\n// '/<li\\b([^>]*)>/i',\r\n// function ( $matches ) use ( $custom_class ) {\r\n// if ( strpos( $matches[1], 'class=' ) !== false ) {\r\n// return str_replace( 'class=\"', 'class=\"' . $custom_class . ' ', $matches[0] );\r\n// } else {\r\n// return '<li' . $matches[1] . ' class=\"' . esc_attr( $custom_class ) . '\">';\r\n// }\r\n// },\r\n// $block_content\r\n// );\r\n// }\r\n// }\r\n// return $block_content;\r\n// }\r\n// add_filter( 'render_block', 'add_custom_class_to_query_loop', 10, 2 );\r\n\r\n// function add_custom_class_to_query_loop( $block_content, $block ) {\r\n// if ( isset( $block['blockName'] ) && $block['blockName'] === 'core/query' ) {\r\n// $custom_class = 'custom-list';\r\n\r\n// Use DOMDocument to manipulate the HTML content more reliably\r\n// $dom = new DOMDocument();\r\n// libxml_use_internal_errors( true ); // Suppress errors due to malformed HTML\r\n// $dom->loadHTML( mb_convert_encoding( $block_content, 'HTML-ENTITIES', 'UTF-8' ) );\r\n// libxml_clear_errors();\r\n\r\n// $lis = $dom->getElementsByTagName( 'li' );\r\n\r\n// foreach ( $lis as $li ) {\r\n// Extract post ID from class attribute\r\n// $classAttr = $li->getAttribute( 'class' );\r\n// preg_match( '/post-(\\d+)/', $classAttr, $matches );\r\n\r\n// if ( isset( $matches[1] ) ) {\r\n// $post_id = $matches[1];\r\n\r\n// Fetch term IDs for categories and tags\r\n// $categories = wp_get_post_categories( $post_id );\r\n// $tags       = wp_get_post_tags( $post_id );\r\n\r\n// Combine term IDs for categories and tags\r\n// $term_ids = array_merge( $categories, wp_list_pluck( $tags, 'term_id' ) );\r\n// $li->setAttribute( 'data-term-ids', implode( ',', $term_ids ) );\r\n\r\n// Add custom class if not present\r\n// if ( strpos( $classAttr, $custom_class ) === false ) {\r\n// $li->setAttribute( 'class', trim( $classAttr . ' ' . $custom_class ) );\r\n// }\r\n// }\r\n// }\r\n\r\n// Save changes back to HTML\r\n// $block_content = $dom->saveHTML();\r\n// }\r\n\r\n// return $block_content;\r\n// }\r\n// add_filter( 'render_block', 'add_custom_class_to_query_loop', 10, 2 );\r\n\r\n"],"names":[],"sourceRoot":""}